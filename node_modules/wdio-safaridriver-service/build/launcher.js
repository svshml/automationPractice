"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _safaridriver = _interopRequireDefault(require("./safaridriver"));

var _getFilePath = _interopRequireDefault(require("./utils/getFilePath"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_LOG_FILENAME = 'SafariDriver.txt';

class SafariDriverLauncher {
  constructor() {
    this.safariDriverLogs = null;
    this.safariDriverArgs = null;
    this.logToStdout = false;
    return this;
  }

  onPrepare(config) {
    this.safariDriverArgs = config.safariDriverArgs || [];
    this.safariDriverLogs = config.safariDriverLogs;

    if (!this.safariDriverArgs.find(arg => arg.startsWith('-p')) && config.port) {
      this.safariDriverArgs.push(`-p ${config.port}`);
    }

    this.process = _safaridriver.default.start(this.safariDriverArgs);

    if (typeof this.safariDriverLogs === 'string') {
      this._redirectLogStream();
    }
  }

  onComplete() {
    _safaridriver.default.stop();
  }

  _redirectLogStream() {
    const logFile = (0, _getFilePath.default)(this.safariDriverLogs, DEFAULT_LOG_FILENAME); // ensure file & directory exists

    _fsExtra.default.ensureFileSync(logFile);

    const logStream = _fsExtra.default.createWriteStream(logFile, {
      flags: 'w'
    });

    this.process.stdout.pipe(logStream);
    this.process.stderr.pipe(logStream);
  }

}

exports.default = SafariDriverLauncher;